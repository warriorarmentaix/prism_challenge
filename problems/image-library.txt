Image Library
-------------

The goal of this task is to create a class library that supports image
manipulation and analysis. This library must support a variety of image
types and several generic operations. You may implement it in a language
of your choosing.

The image type can be specified when an image object is created, but
from that point on, the user code simply performs operations using references
to generic image objects.

For instance, if the user code creates an RGB image and then passes a
reference to this object to some other part of the software, the software
should be able to do things like copy, scale, etc. without ever knowing
(or caring about) the actual type of the image. In particular, this library
must support two different image types: Grey, and RGB, and two different
pixel depths: int and float

The pixel data for an RGB image is stored in a packed format that correspond
to the red, green, and blue components, respectively. We will assume that the
pixels are stored in order from left to right, top to bottom for the image.
So, a buffer containing RGB pixel data would look as follows:

    R0, G0, B0, R1, G1, B1, ...

where pixel 0 is in the upper-left corner of the image.

Grey images are stored in a similar format.

    P0, P1, P2, P3, P4, ...

Where P is the single pixel value, and pixel 0 is in the upper-left corner
of the image.

This image library must support the following operations:

  * Creation: Given an x,y size, pixel format (float or int) and a pixel type
    (grey or rgb), create the image
  * Width: This method should provide the width of the image.
  * Height: This method should provide the height of the image.
  * Copy: This method should return an identical copy of the image.
  * Accessor function(s): This method should provide pixel access to the image,
    i.e.: get or set the value of the pixel at row 4, column 3
  * Convolve with arbitrary kernel: This method takes an arbitrary kernel of
    size 3 pixels x 3 pixels, convolves it with the image, and returns a new
    image that represents the convolved result. Write a function stub only.
    You needn't write the actual code to do the convolution, but you can if
    you like.
  * Scale: This method should take an integer scale factor and scale the image
    down (i.e. the resulting image is smaller) by the scale factor in each
    direction. Write a function stub only, you needn't write the code to do
    the scaling, but you can if you like. 

In addition to your solution, please include in a README or otherwise:

  * example usage of your solution
  * why you chose the language you did
  * why you chose the implementation you did, and any upsides/downsides it
    affords in comparison to other options.
  * if you ran out of time, what you were hoping to do next
